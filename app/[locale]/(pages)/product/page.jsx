import ProductContainer from "../../component/product/productContainer";

export const metadata = {
  title: "Product Page",
  description: "Generated by create next app",
};

async function getProducts(page = 1, CategoryId = null, searchTerm = null) {
  try {
    let url = `${process.env.NEXT_PUBLIC_API_URL}/Products/GetAllProductsForUser?pageNumber=${page}&pageSize=9`;

    if (CategoryId) url += `&CategoryId=${CategoryId}`;
    if (searchTerm) url += `&searchTerm=${searchTerm}`;

    const res = await fetch(url, { cache: "no-store" });

    if (!res.ok) {
      throw new Error("Failed to fetch products");
    }

    const result = await res.json();
    return {
      products: result?.data || [],
      pagination: {
        current_page: result?.pageNumber || 1,
        last_page: Math.ceil(result?.totalCount / result?.pageSize) || 1,
        per_page: result?.pageSize || 10,
        total: result?.totalCount || 0,
      },
    };
  } catch (error) {
    console.error("Error fetching products:", error);
    return {
      products: [],
      pagination: {
        current_page: 1,
        last_page: 1,
        per_page: 10,
        total: 0,
      },
    };
  }
}

async function getCategories() {
  try {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/Categories/GetAllCategoriesWithoutpagination`,
      { cache: "no-store" }
    );

    if (!res.ok) throw new Error(`API Error: ${res.status}`);

    const results = await res.json();
    return results.data || [];
  } catch (error) {
    console.error("Error fetching categories:", error);
    return [];
  }
}

export default async function Product({ params, searchParams }) {
  const { locale } = await params;
  const page = (await searchParams?.page) || 1;
  const category = (await searchParams?.category) || null;
  const searchTerm = (await searchParams?.search) || null;

  const [catog, { products, pagination }] = await Promise.all([
    getCategories(),
    getProducts(page, category, searchTerm),
  ]);

  return (
    <ProductContainer
      products={products}
      pagination={pagination}
      locale={locale}
      catog={catog}
      currentCategory={category}
      currentSearch={searchTerm}
    />
  );
}
